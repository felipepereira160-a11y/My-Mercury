import streamlit as st
import google.generativeai as genai
import pandas as pd

# Configura o t√≠tulo da p√°gina e um √≠cone
st.set_page_config(page_title="Meu Chatbot Analista", page_icon="üìä")

# T√≠tulo principal do aplicativo
st.title("Meu Chatbot Analista de Dados üìä")

# --- Configura√ß√£o da API Key ---
try:
    genai.configure(api_key=st.secrets["GOOGLE_API_KEY"])
except Exception as e:
    st.error("Chave de API do Google n√£o configurada. Por favor, adicione-a aos segredos do seu app no Streamlit.")
    st.stop()

# --- Upload e Processamento da Planilha ---
st.sidebar.header("Adicionar Conhecimento")
uploaded_file = st.sidebar.file_uploader("Fa√ßa o upload de um arquivo CSV", type=["csv"])

# Inicializa o dataframe na sess√£o para que persista
if 'dataframe' not in st.session_state:
    st.session_state.dataframe = None

if uploaded_file is not None:
    try:
        # Tenta ler o CSV com diferentes configura√ß√µes
        st.session_state.dataframe = pd.read_csv(uploaded_file, encoding='latin-1', sep=';')
        st.sidebar.success("Arquivo carregado com sucesso!")
    except Exception as e:
        # Tenta ler com v√≠rgula como separador se o ponto e v√≠rgula falhar
        try:
            uploaded_file.seek(0) # Volta ao in√≠cio do arquivo para tentar ler de novo
            st.session_state.dataframe = pd.read_csv(uploaded_file, encoding='latin-1', sep=',')
            st.sidebar.success("Arquivo carregado com sucesso!")
        except Exception as e2:
            st.sidebar.error(f"Erro ao ler o arquivo: {e2}")

if st.session_state.dataframe is not None:
    st.sidebar.write("Pr√©-visualiza√ß√£o dos Dados:")
    st.sidebar.dataframe(st.session_state.dataframe.head())

# --- Inicializa√ß√£o do Modelo e do Chat ---
model = genai.GenerativeModel('gemini-pro-latest')
if "chat" not in st.session_state:
    st.session_state.chat = model.start_chat(history=[])

# --- Fun√ß√£o para gerar e executar c√≥digo Pandas ---
def executar_analise_pandas(df, pergunta):
    """Usa o Gemini para converter uma pergunta em c√≥digo Pandas e execut√°-lo."""
    
    prompt_engenharia = f"""
    Voc√™ √© um assistente especialista em Python e Pandas. Sua tarefa √© converter uma pergunta em uma √∫nica linha de c√≥digo Pandas que a responda.
    O dataframe est√° na vari√°vel `df`.
    
    Aqui est√£o as primeiras linhas do dataframe para refer√™ncia das colunas:
    {df.head().to_string()}
    
    Pergunta do usu√°rio: "{pergunta}"
    
    Baseado na pergunta, gere apenas a linha de c√≥digo Pandas necess√°ria. N√£o use print(), n√£o atribua a vari√°veis, apenas o comando.
    Exemplos:
    - Pergunta: "quantas linhas existem?" -> Resposta: df.shape[0]
    - Pergunta: "quais os valores √∫nicos na coluna 'Cliente'?" -> Resposta: df['Cliente'].unique()
    - Pergunta: "filtre as linhas onde a cidade √© 'S√£o Paulo'" -> Resposta: df[df['Cidade'] == 'S√£o Paulo']
    """
    
    try:
        code_response = genai.GenerativeModel('gemini-pro-latest').generate_content(prompt_engenharia)
        
        # --- AQUI EST√Å A CORRE√á√ÉO ---
        # Limpa o c√≥digo recebido da IA antes de executar
        codigo_pandas = code_response.text.strip()
        codigo_pandas = codigo_pandas.replace('`', '')
        if codigo_pandas.lower().startswith('python'):
            codigo_pandas = codigo_pandas[6:].strip()
        
        st.info(f"C√≥digo Pandas gerado pela IA: `{codigo_pandas}`")
        
        resultado = eval(codigo_pandas, {'df': df, 'pd': pd})
        return resultado, None
    except Exception as e:
        return None, f"Ocorreu um erro ao executar a an√°lise: {e}"

# --- Exibi√ß√£o do Hist√≥rico da Conversa ---
for message in st.session_state.chat.history:
    role = "assistant" if message.role == 'model' else message.role
    with st.chat_message(role):
        st.markdown(message.parts[0].text)

# --- Entrada do Usu√°rio ---
if prompt := st.chat_input("Fa√ßa uma pergunta sobre seus dados..."):
    with st.chat_message("user"):
        st.markdown(prompt)
    
    if st.session_state.dataframe is not None:
        resultado_analise, erro = executar_analise_pandas(st.session_state.dataframe, prompt)
        
        if erro:
            st.error(erro)
            response_text = "Desculpe, n√£o consegui analisar os dados. Tente uma pergunta mais simples ou verifique o arquivo."
        else:
            prompt_final = f"""
            A seguinte pergunta foi feita sobre uma planilha: "{prompt}"
            Uma an√°lise nos dados foi executada e o resultado foi:
            ---
            {resultado_analise}
            ---
            Com base nesse resultado, formule uma resposta amig√°vel e clara para o usu√°rio.
            """
            response = st.session_state.chat.send_message(prompt_final)
            response_text = response.text
    else:
        response = st.session_state.chat.send_message(prompt)
        response_text = response.text

    with st.chat_message("assistant"):
        st.markdown(response_text)
