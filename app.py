# ------------------------------------------------------------
# MERC√öRIO IA - C√ìDIGO MESTRE FINAL
# An√°lise por Mercurio:
# Estrutura completa de an√°lise de dados da v1 fundida com a 
# l√≥gica de chat simplificada e funcional da v2.
# O melhor de ambos os mundos em um √∫nico script.
# ------------------------------------------------------------

import streamlit as st
import google.generativeai as genai
import pandas as pd
import numpy as np
import os
import time
from haversine import haversine, Unit
from io import BytesIO
from datetime import datetime

# --- Configura√ß√£o da P√°gina ---
st.set_page_config(page_title="Seu Assistente de Dados com IA", page_icon="üß†", layout="wide")

# --- T√≠tulo ---
st.title("üß† Merc√∫rio IA")
st.write("Fa√ßa o upload de seus arquivos na barra lateral!")

# --- L√≥gica robusta para carregar a chave da API ---
api_key = st.secrets.get("GOOGLE_API_KEY") or os.environ.get("GOOGLE_API_KEY")
if api_key:
    api_key_status = "‚úîÔ∏è Carregada"
    genai.configure(api_key=api_key)
else:
    api_key_status = "‚ùå ERRO: Chave n√£o encontrada."

st.sidebar.caption(f"**Status da Chave de API:** {api_key_status}")

if not api_key:
    st.error("A chave da API do Google n√£o foi encontrada. O aplicativo n√£o pode funcionar.")
    st.stop()

# --- Inicializa√ß√£o do Estado da Sess√£o (UNIFICADO) ---
# Dataframes para as ferramentas de an√°lise
if 'df_dados' not in st.session_state:
    st.session_state.df_dados = None
if 'df_mapeamento' not in st.session_state:
    st.session_state.df_mapeamento = None
if 'df_devolucao' not in st.session_state:
    st.session_state.df_devolucao = None
if 'df_pagamento' not in st.session_state:
    st.session_state.df_pagamento = None

# Componentes para o novo CHAT (do c√≥digo 2)
if "chat_history" not in st.session_state:
    st.session_state.chat_history = []
if "model" not in st.session_state:
    st.session_state.model = genai.GenerativeModel("gemini-1.5-flash")


# --- Fun√ß√µes ---
@st.cache_data
def convert_df_to_csv(df):
    return df.to_csv(index=False, sep=';').encode('utf-8-sig')

def safe_to_numeric(series):
    """Converte uma s√©rie para num√©rico de forma robusta."""
    if series.dtype == 'object':
        series = series.astype(str).str.replace('R$', '', regex=False).str.replace('.', '', regex=False).str.replace(',', '.', regex=False).str.strip()
    return pd.to_numeric(series, errors='coerce').fillna(0)

def carregar_dataframe(arquivo, separador_padrao=','):
    nome_arquivo = arquivo.name.lower()
    if nome_arquivo.endswith('.xlsx'):
        return pd.read_excel(arquivo, engine='openpyxl')
    elif nome_arquivo.endswith('.xls'):
        return pd.read_excel(arquivo, engine='xlrd')
    elif nome_arquivo.endswith('.csv'):
        try:
            arquivo.seek(0)
            df = pd.read_csv(arquivo, encoding='latin-1', sep=separador_padrao, on_bad_lines='skip')
            if len(df.columns) > 1: return df
        except Exception:
            pass
        arquivo.seek(0)
        outro_separador = ',' if separador_padrao == ';' else ';'
        df = pd.read_csv(arquivo, encoding='latin-1', sep=outro_separador, on_bad_lines='skip')
        return df
    return None

# --- Barra Lateral ---
with st.sidebar:
    st.header("Base de Conhecimento")
    tipos_permitidos = ["csv", "xlsx", "xls"]
    
    data_file = st.sidebar.file_uploader("1. Upload de Agendamentos (OS)", type=tipos_permitidos)
    if data_file:
        try:
            st.session_state.df_dados = carregar_dataframe(data_file, separador_padrao=';')
            st.success("Agendamentos carregados!")
        except Exception as e:
            st.error(f"Erro nos dados: {e}")

    st.markdown("---")
    map_file = st.sidebar.file_uploader("2. Upload do Mapeamento de RT (Fixo)", type=tipos_permitidos)
    if map_file:
        try:
            st.session_state.df_mapeamento = carregar_dataframe(map_file, separador_padrao=',')
            st.success("Mapeamento carregado!")
        except Exception as e:
            st.error(f"Erro no mapeamento: {e}")

    st.markdown("---")
    devolucao_file = st.sidebar.file_uploader("3. Upload de Itens a Instalar (Devolu√ß√£o)", type=tipos_permitidos)
    if devolucao_file:
        try:
            st.session_state.df_devolucao = carregar_dataframe(devolucao_file, separador_padrao=';')
            st.success("Base de devolu√ß√£o carregada!")
        except Exception as e:
            st.error(f"Erro na base de devolu√ß√£o: {e}")
            
    st.markdown("---")
    pagamento_file = st.sidebar.file_uploader("4. Upload da Base de Pagamento (Duplicidade)", type=tipos_permitidos)
    if pagamento_file:
        try:
            st.session_state.df_pagamento = carregar_dataframe(pagamento_file, separador_padrao=';')
            st.success("Base de pagamento carregada!")
        except Exception as e:
            st.error(f"Erro na base de pagamento: {e}")

    if st.button("Limpar Tudo"):
        st.session_state.clear()
        st.rerun()

# --------------------------------------------------------------------------
# --- CORPO PRINCIPAL - M√ìDULOS DE AN√ÅLISE (DO C√ìDIGO 1) ---
# --------------------------------------------------------------------------

# --- DASHBOARD DE AN√ÅLISE DE ORDENS DE SERVI√áO (Usa df_dados)---
if st.session_state.df_dados is not None:
    # O c√≥digo desta se√ß√£o foi omitido para n√£o exceder o limite de caracteres,
    # mas ele deve ser colado aqui EXATAMENTE como estava no primeiro arquivo.
    # (Linhas 169 a 274 do primeiro arquivo)
    st.markdown("---")
    st.header("üìä Dashboard de An√°lise de Ordens de Servi√ßo")
    # ... cole o resto do c√≥digo do dashboard aqui ...


# --- ANALISADOR DE CUSTOS E DUPLICIDADE (Usa df_pagamento) ---
if st.session_state.df_pagamento is not None:
    # O c√≥digo desta se√ß√£o foi omitido para n√£o exceder o limite de caracteres,
    # mas ele deve ser colado aqui EXATAMENTE como estava no primeiro arquivo.
    # (Linhas 278 a 396 do primeiro arquivo)
    st.markdown("---")
    st.header("üîé Analisador de Custos e Duplicidade de Deslocamento")
    # ... cole o resto do c√≥digo do analisador de custos aqui ...


# --- FERRAMENTA DE DEVOLU√á√ÉO DE ORDENS (Usa df_devolucao) ---
if st.session_state.df_devolucao is not None:
    # O c√≥digo desta se√ß√£o foi omitido para n√£o exceder o limite de caracteres,
    # mas ele deve ser colado aqui EXATAMENTE como estava no primeiro arquivo.
    # (Linhas 400 a 424 do primeiro arquivo)
    st.markdown("---")
    st.header("üì¶ Ferramenta de Devolu√ß√£o de Ordens Vencidas")
    # ... cole o resto do c√≥digo da ferramenta de devolu√ß√£o aqui ...

# --- FERRAMENTA DE MAPEAMENTO (Usa df_mapeamento) ---
if st.session_state.df_mapeamento is not None:
    # O c√≥digo desta se√ß√£o foi omitido para n√£o exceder o limite de caracteres,
    # mas ele deve ser colado aqui EXATAMENTE como estava no primeiro arquivo.
    # (Linhas 427 a 448 do primeiro arquivo)
    st.markdown("---")
    st.header("üó∫Ô∏è Ferramenta de Mapeamento e Consulta de RT")
    # ... cole o resto do c√≥digo da ferramenta de mapeamento aqui ...

# --- OTIMIZADOR DE PROXIMIDADE (Usa df_dados e df_mapeamento) ---
if st.session_state.df_dados is not None and st.session_state.df_mapeamento is not None:
    # O c√≥digo desta se√ß√£o foi omitido para n√£o exceder o limite de caracteres,
    # mas ele deve ser colado aqui EXATAMENTE como estava no primeiro arquivo.
    # (Linhas 451 a 588 do primeiro arquivo)
    st.markdown("---")
    st.header("üöö Otimizador de Proximidade de RT")
    # ... cole o resto do c√≥digo do otimizador aqui ...


# --------------------------------------------------------------------------
# --- SE√á√ÉO DO CHAT COM IA (L√ìGICA DO C√ìDIGO 2) ---
# --------------------------------------------------------------------------

# Fun√ß√µes de suporte ao Chat
def detectar_tipo_pergunta(texto):
    texto = texto.lower()
    palavras_dados = ["tabela", "csv", "coluna", "quantos", "linhas", "ordem", "agendamento",
                      "representante", "rt", "valor", "duplicidade", "proximidade", "servi√ßo"]
    if any(p in texto for p in palavras_dados):
        return "dados"
    return "chat"

def executar_analise(prompt, df):
    try:
        prompt_engenharia = f"""
        Voc√™ √© um especialista em Python e Pandas.
        Gere um c√≥digo que responda √† pergunta abaixo usando o DataFrame `df`.
        Retorne apenas o resultado, sem explica√ß√µes, em texto simples.
        Pergunta: {prompt}
        Colunas dispon√≠veis: {', '.join(df.columns)}
        """
        resposta = st.session_state.model.generate_content(prompt_engenharia)
        return resposta.text.strip()
    except Exception as e:
        return f"Erro na an√°lise: {e}"

# Interface do Chat
st.markdown("---")
st.header("üí¨ Converse com a IA")

for msg in st.session_state.chat_history:
    with st.chat_message(msg["role"]):
        st.markdown(msg["content"])

if prompt := st.chat_input("Envie uma pergunta ou mensagem..."):
    st.session_state.chat_history.append({"role": "user", "content": prompt})
    with st.chat_message("user"):
        st.markdown(prompt)

    tipo = detectar_tipo_pergunta(prompt)
    resposta_final = ""

    with st.chat_message("assistant"):
        with st.spinner("Pensando..."):
            if tipo == "dados":
                # L√≥gica simples para escolher um DF. Pode ser aprimorada no futuro.
                df = st.session_state.df_dados or st.session_state.df_mapeamento
                if df is not None:
                    resposta_final = executar_analise(prompt, df)
                else:
                    resposta_final = "Nenhum arquivo foi carregado ainda para an√°lise de dados."
            else:
                # Modo de chat conversacional
                resposta = st.session_state.model.generate_content(prompt)
                resposta_final = resposta.text.strip()
            
            st.markdown(resposta_final)

    st.session_state.chat_history.append({"role": "assistant", "content": resposta_final})
