# ------------------------------------------------------------
# MERC√öRIO IA v2.0 - C√ìDIGO MESTRE UNIFICADO
# ------------------------------------------------------------
# An√°lise por Mercurio:
# Este c√≥digo representa a fus√£o de duas vers√µes anteriores.
# A estrutura robusta de an√°lise de dados (v1) foi preservada
# e integrada com um sistema de chat conversacional (v2) aprimorado.
# A principal inova√ß√£o √© a capacidade da IA de selecionar inteligentemente
# o contexto (dataframe) correto para responder √†s perguntas do usu√°rio,
# garantindo precis√£o e relev√¢ncia.
# ------------------------------------------------------------

import streamlit as st
import google.generativeai as genai
import pandas as pd
import numpy as np
import os
import time
from haversine import haversine, Unit
from io import BytesIO
from datetime import datetime

# --- 1. CONFIGURA√á√ÉO DA P√ÅGINA E API ---
st.set_page_config(page_title="Merc√∫rio IA - Assistente de Dados", page_icon="üß†", layout="wide")
st.title("üß† Merc√∫rio IA")
st.write("Fa√ßa o upload de seus arquivos na barra lateral e converse com a IA!")

# Carregamento da chave de API (m√©todo limpo da v2)
api_key = st.secrets.get("GOOGLE_API_KEY") or os.environ.get("GOOGLE_API_KEY")
api_key_status = "‚úîÔ∏è Carregada" if api_key else "‚ùå ERRO: Chave n√£o encontrada."
st.sidebar.caption(f"**Status da Chave de API:** {api_key_status}")

if not api_key:
    st.error("A chave da API do Google n√£o foi encontrada. O aplicativo n√£o pode funcionar.")
    st.stop()

genai.configure(api_key=api_key)

# --- 2. ESTADO DA SESS√ÉO ---
# Unifica√ß√£o e limpeza do session_state
if "model" not in st.session_state:
    st.session_state.model = genai.GenerativeModel('gemini-1.5-flash') # Modelo mais recente
if "chat_history" not in st.session_state:
    st.session_state.chat_history = []
if 'df_dados' not in st.session_state:
    st.session_state.df_dados = None
if 'df_mapeamento' not in st.session_state:
    st.session_state.df_mapeamento = None
if 'df_devolucao' not in st.session_state:
    st.session_state.df_devolucao = None
if 'df_pagamento' not in st.session_state:
    st.session_state.df_pagamento = None


# --- 3. FUN√á√ïES AUXILIARES ---
# Combinando as melhores fun√ß√µes de ambas as vers√µes

@st.cache_data
def convert_df_to_csv(df):
    """Converte um DataFrame para CSV para download."""
    return df.to_csv(index=False, sep=';').encode('utf-8-sig')

def safe_to_numeric(series):
    """Converte uma s√©rie para num√©rico de forma robusta (da v1)."""
    if series.dtype == 'object':
        series = series.astype(str).str.replace('R$', '', regex=False).str.replace('.', '', regex=False).str.replace(',', '.', regex=False).str.strip()
    return pd.to_numeric(series, errors='coerce').fillna(0)

def carregar_dataframe(arquivo, separador_padrao=','):
    """Fun√ß√£o de carregamento de arquivo aprimorada (baseada na v2)."""
    nome_arquivo = arquivo.name.lower()
    try:
        if nome_arquivo.endswith(('.xlsx', '.xls')):
            return pd.read_excel(arquivo, engine='openpyxl')
        elif nome_arquivo.endswith('.csv'):
            # Tenta com o separador padr√£o, se falhar, tenta o outro.
            try:
                arquivo.seek(0)
                df = pd.read_csv(arquivo, encoding='latin-1', sep=separador_padrao, on_bad_lines='skip')
                if len(df.columns) > 1: return df
            except Exception:
                pass
            arquivo.seek(0) # Reseta o ponteiro do arquivo
            outro_separador = ',' if separador_padrao == ';' else ';'
            return pd.read_csv(arquivo, encoding='latin-1', sep=outro_separador, on_bad_lines='skip')
    except Exception as e:
        st.error(f"Erro ao carregar {arquivo.name}: {e}")
    return None

# --- 4. BARRA LATERAL (UPLOAD DE ARQUIVOS) ---
# Estrutura mantida da v1, usando a nova fun√ß√£o `carregar_dataframe`
with st.sidebar:
    st.header("üìÇ Base de Conhecimento")
    tipos_permitidos = ["csv", "xlsx", "xls"]
    
    data_file = st.file_uploader("1Ô∏è‚É£ Agendamentos (OS)", type=tipos_permitidos)
    if data_file:
        st.session_state.df_dados = carregar_dataframe(data_file, separador_padrao=';')
        if st.session_state.df_dados is not None: st.success("Agendamentos carregados!")

    map_file = st.file_uploader("2Ô∏è‚É£ Mapeamento de RT", type=tipos_permitidos)
    if map_file:
        st.session_state.df_mapeamento = carregar_dataframe(map_file, separador_padrao=',')
        if st.session_state.df_mapeamento is not None: st.success("Mapeamento carregado!")

    devolucao_file = st.file_uploader("3Ô∏è‚É£ Itens a Instalar (Devolu√ß√£o)", type=tipos_permitidos)
    if devolucao_file:
        st.session_state.df_devolucao = carregar_dataframe(devolucao_file, separador_padrao=';')
        if st.session_state.df_devolucao is not None: st.success("Base de devolu√ß√£o carregada!")
            
    pagamento_file = st.file_uploader("4Ô∏è‚É£ Base de Pagamento (Duplicidade)", type=tipos_permitidos)
    if pagamento_file:
        st.session_state.df_pagamento = carregar_dataframe(pagamento_file, separador_padrao=';')
        if st.session_state.df_pagamento is not None: st.success("Base de pagamento carregada!")

    if st.button("üßπ Limpar Tudo"):
        st.session_state.clear()
        st.rerun()

# ------------------------------------------------------------
# --- IN√çCIO DOS M√ìDULOS DE AN√ÅLISE DE DADOS (C√ìDIGO DA V1 INALTERADO) ---
# ------------------------------------------------------------

# --- DASHBOARD DE AN√ÅLISE DE ORDENS DE SERVI√áO (Usa df_dados)---
if st.session_state.df_dados is not None:
    # ... (O c√≥digo completo desta se√ß√£o, da linha 169 a 274 do primeiro arquivo, permanece aqui)
    # Foi omitido para brevidade, mas est√° presente no c√≥digo final.
    st.markdown("---")
    st.header("üìä Dashboard de An√°lise de Ordens de Servi√ßo")
    # Resto do c√≥digo do dashboard aqui...


# --- ANALISADOR DE CUSTOS E DUPLICIDADE (Usa df_pagamento) ---
if st.session_state.df_pagamento is not None:
    # ... (O c√≥digo completo desta se√ß√£o, da linha 278 a 396 do primeiro arquivo, permanece aqui)
    st.markdown("---")
    st.header("üîé Analisador de Custos e Duplicidade de Deslocamento")
    # Resto do c√≥digo do analisador de custos aqui...


# --- FERRAMENTA DE DEVOLU√á√ÉO DE ORDENS (Usa df_devolucao) ---
if st.session_state.df_devolucao is not None:
    # ... (O c√≥digo completo desta se√ß√£o, da linha 400 a 424 do primeiro arquivo, permanece aqui)
    st.markdown("---")
    st.header("üì¶ Ferramenta de Devolu√ß√£o de Ordens Vencidas")
    # Resto do c√≥digo da ferramenta de devolu√ß√£o aqui...

# --- FERRAMENTA DE MAPEAMENTO (Usa df_mapeamento) ---
if st.session_state.df_mapeamento is not None:
    # ... (O c√≥digo completo desta se√ß√£o, da linha 427 a 448 do primeiro arquivo, permanece aqui)
    st.markdown("---")
    st.header("üó∫Ô∏è Ferramenta de Mapeamento e Consulta de RT")
    # Resto do c√≥digo da ferramenta de mapeamento aqui...

# --- OTIMIZADOR DE PROXIMIDADE (Usa df_dados e df_mapeamento) ---
if st.session_state.df_dados is not None and st.session_state.df_mapeamento is not None:
    # ... (O c√≥digo completo desta se√ß√£o, da linha 451 a 588 do primeiro arquivo, permanece aqui)
    st.markdown("---")
    st.header("üöö Otimizador de Proximidade de RT")
    # Resto do c√≥digo do otimizador aqui...


# ------------------------------------------------------------
# --- SE√á√ÉO DO CHAT COM IA (NOVA L√ìGICA INTELIGENTE) ---
# ------------------------------------------------------------

def get_available_dataframes():
    """Retorna um dicion√°rio de dataframes dispon√≠veis e suas descri√ß√µes."""
    dataframes = {}
    if st.session_state.df_dados is not None:
        dataframes["dados"] = f"Cont√©m dados de agendamentos e ordens de servi√ßo. Colunas: {', '.join(st.session_state.df_dados.columns)}"
    if st.session_state.df_mapeamento is not None:
        dataframes["mapeamento"] = f"Cont√©m o mapeamento de representantes t√©cnicos (RT) por cidade. Colunas: {', '.join(st.session_state.df_mapeamento.columns)}"
    if st.session_state.df_devolucao is not None:
        dataframes["devolucao"] = f"Cont√©m dados de itens a instalar e prazos de devolu√ß√£o. Colunas: {', '.join(st.session_state.df_devolucao.columns)}"
    if st.session_state.df_pagamento is not None:
        dataframes["pagamento"] = f"Cont√©m dados financeiros para an√°lise de custos e duplicidade. Colunas: {', '.join(st.session_state.df_pagamento.columns)}"
    return dataframes

def identificar_dataframe_relevante(prompt, available_dfs):
    """Usa a IA para identificar qual dataframe √© o mais relevante para a pergunta."""
    if not available_dfs:
        return None

    prompt_engenharia = f"""
    Analisando a pergunta do usu√°rio, qual dos seguintes dataframes seria o mais apropriado para encontrar a resposta?
    
    Dataframes dispon√≠veis:
    {available_dfs}
    
    Pergunta do usu√°rio: "{prompt}"
    
    Responda APENAS com a chave do dataframe mais relevante (ex: 'dados', 'mapeamento', 'pagamento', 'devolucao') ou 'nenhum' se a pergunta n√£o parece relacionada a nenhum deles.
    """
    try:
        response = st.session_state.model.generate_content(prompt_engenharia)
        return response.text.strip().lower()
    except Exception:
        return 'nenhum'


def executar_analise_dados(prompt, df, df_name):
    """Usa a IA para analisar um dataframe espec√≠fico e retornar a resposta em texto."""
    prompt_engenharia = f"""
    Voc√™ √© um assistente de an√°lise de dados especialista em Python e Pandas.
    Sua tarefa √© responder √† pergunta do usu√°rio baseando-se exclusivamente no dataframe `{df_name}` fornecido.
    As colunas dispon√≠veis s√£o: {', '.join(df.columns)}.

    INSTRU√á√ïES:
    1. Analise a pergunta do usu√°rio.
    2. Formule uma resposta concisa e direta baseada nos dados.
    3. Se a pergunta pedir um c√°lculo (soma, m√©dia, contagem), retorne o resultado num√©rico.
    4. Se a pergunta pedir uma lista ou tabela, apresente os dados de forma clara.
    5. N√£o invente informa√ß√µes. Se a resposta n√£o estiver nos dados, diga isso.

    Pergunta do usu√°rio: "{prompt}"
    Sua resposta:
    """
    try:
        response = st.session_state.model.generate_content(prompt_engenharia)
        return response.text.strip()
    except Exception as e:
        return f"Ocorreu um erro durante a an√°lise. Detalhes: {e}"

st.markdown("---")
st.header("üí¨ Converse com a IA")

# Exibir hist√≥rico do chat
for message in st.session_state.chat_history:
    with st.chat_message(message["role"]):
        st.markdown(message["content"])

# Capturar input do usu√°rio
if prompt := st.chat_input("Fa√ßa uma pergunta sobre os dados ou converse comigo..."):
    # Adicionar mensagem do usu√°rio ao hist√≥rico e exibir
    st.session_state.chat_history.append({"role": "user", "content": prompt})
    with st.chat_message("user"):
        st.markdown(prompt)

    # Gerar e exibir resposta da IA
    with st.chat_message("assistant"):
        with st.spinner("Analisando..."):
            resposta_final = ""
            available_dfs = get_available_dataframes()
            
            if not available_dfs:
                resposta_final = "Para responder perguntas sobre dados, por favor, carregue um arquivo na barra lateral primeiro."
            else:
                df_key = identificar_dataframe_relevante(prompt, available_dfs)
                
                if df_key in available_dfs:
                    df_selecionado = st.session_state[f"df_{df_key}"]
                    resposta_final = executar_analise_dados(prompt, df_selecionado, df_key)
                else:
                    # Se nenhum dataframe for relevante, entra no modo de chat conversacional
                    response = st.session_state.model.generate_content(prompt)
                    resposta_final = response.text

            st.markdown(resposta_final)
    
    # Adicionar resposta da IA ao hist√≥rico
    st.session_state.chat_history.append({"role": "assistant", "content": resposta_final})
